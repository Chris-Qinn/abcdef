import socket
import json

def distribute_work(machines, shadow_file):
    for machine in machines:
        host, port = machine['ip'], machine['port']
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                # Enable address reuse
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.connect((host, port))
                
                # Prepare and send task payload
                task = {"shadow_file": shadow_file}
                s.sendall(json.dumps(task).encode('utf-8'))
                print(f"Task sent to {host}:{port}")
        except socket.error as e:
            print(f"Socket error connecting to {host}:{port} - {e}")
        except Exception as e:
            print(f"Unexpected error connecting to {host}:{port} - {e}")

def collect_results(machines):
    results = []
    for machine in machines:
        host, port = machine['ip'], machine['port']
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                # Enable address reuse
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.connect((host, port))

                # Send request for results
                s.sendall(b"RESULT")
                data = s.recv(4096).decode('utf-8')  # Increased buffer size for larger responses
                if data:
                    results.append(data)
                    print(f"Received data from {host}:{port}")
        except socket.error as e:
            print(f"Socket error connecting to {host}:{port} - {e}")
        except Exception as e:
            print(f"Unexpected error connecting to {host}:{port} - {e}")

    return results if results else None
