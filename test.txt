#include "shadow_parser.h"
#include "cracker.h"
#include <chrono>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

void log_results(const std::string& filename, const std::string& hash_type, const std::string& cracked_password, double duration) {
    std::ofstream file(filename, std::ios::app); // Append mode
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open test_results.csv.");
    }
    file << hash_type << "," << cracked_password << "," << duration << " seconds\n";
    file.close();
}

int main() {
    const std::string shadow_file = "/etc/shadow";
    const std::string output_file = "tests/test_results.csv";
    const std::string charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    const int max_length = 4; // Adjust based on the complexity of the password

    try {
        std::string hash_type;

        // Modified to process the second field of the shadow file directly
        std::ifstream file(shadow_file);
        if (!file.is_open()) {
            throw std::runtime_error("Failed to open shadow file.");
        }

        std::string line;
        std::getline(file, line); // Process the first entry for simplicity
        size_t first_colon = line.find(":");
        size_t second_colon = line.find(":", first_colon + 1);
        if (first_colon == std::string::npos || second_colon == std::string::npos) {
            throw std::runtime_error("Invalid shadow file format.");
        }

        std::string target_hash = line.substr(first_colon + 1, second_colon - first_colon - 1);

        std::cout << "Target hash: " << target_hash << "\n";
        hash_type = "Plaintext"; // Assuming plaintext for the example

        std::vector<std::string> keyspace = generate_keyspace(charset, max_length);

        auto start_time = std::chrono::high_resolution_clock::now();
        std::string cracked_password = brute_force_crack(keyspace, target_hash, hash_type);
        auto end_time = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed = end_time - start_time;

        if (!cracked_password.empty()) {
            std::cout << "Password cracked: " << cracked_password << "\n";
        } else {
            std::cout << "Password not found in keyspace.\n";
        }

        log_results(output_file, hash_type, cracked_password, elapsed.count());

    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
        return 1;
    }

    return 0;
}
